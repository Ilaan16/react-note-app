{"ast":null,"code":"var _jsxFileName = \"/home/ilaan/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"./App.css\";\nimport Main from \"./Main\";\nimport Sidebar from \"./Sidebar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [activeNote, setActiveNote] = useState(false);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Untilted Note\",\n      body: \"\",\n      lastModified: Date.now()\n    };\n    setNotes([newNote, ...notes]);\n  };\n\n  const onUpdateNote = onUpdateNote => {\n    const updatedNoteArray = notes.map(note => {\n      if (note.id === activeNote) {\n        return updatedNote;\n      }\n\n      return note;\n    });\n    set;\n  };\n\n  const onDeleteNote = idToDelete => {\n    setNotes(notes.filter(note => note.id !== idToDelete));\n  };\n\n  const getActiveNote = () => {\n    return notes.find(note => note.id === activeNote);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      notes: notes,\n      onAddNote: onAddNote,\n      onDeleteNote: onDeleteNote,\n      activeNote: activeNote,\n      setActiveNote: setActiveNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      activeNote: getActiveNote()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gB5omx9RPH1kLpQQ78qO3OWf5pg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ilaan/my-app/src/App.js"],"names":["useState","uuid","Main","Sidebar","App","notes","setNotes","activeNote","setActiveNote","onAddNote","newNote","id","title","body","lastModified","Date","now","onUpdateNote","updatedNoteArray","map","note","updatedNote","set","onDeleteNote","idToDelete","filter","getActiveNote","find"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMS,SAAS,GAAG,MAAM;AACtB,UAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEV,IAAI,EADM;AAGdW,MAAAA,KAAK,EAAE,eAHO;AAKdC,MAAAA,IAAI,EAAE,EALQ;AAOdC,MAAAA,YAAY,EAAEC,IAAI,CAACC,GAAL;AAPA,KAAhB;AAUAV,IAAAA,QAAQ,CAAC,CAACI,OAAD,EAAU,GAAGL,KAAb,CAAD,CAAR;AACD,GAZD;;AAcA,QAAMY,YAAY,GAAIA,YAAD,IAAkB;AACrC,UAAMC,gBAAgB,GAAGb,KAAK,CAACc,GAAN,CAAWC,IAAD,IAAU;AAC3C,UAAGA,IAAI,CAACT,EAAL,KAAYJ,UAAf,EAA2B;AACzB,eAAOc,WAAP;AACD;;AAGD,aAAOD,IAAP;AACD,KAPwB,CAAzB;AASAE,IAAAA,GAAG;AACJ,GAXD;;AAaA,QAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnClB,IAAAA,QAAQ,CAACD,KAAK,CAACoB,MAAN,CAAcL,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYa,UAAnC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAM;AAC1B,WAAOrB,KAAK,CAACsB,IAAN,CAAYP,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYJ,UAAjC,CAAP;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,SAAS,EAAEI,SAFb;AAGE,MAAA,YAAY,EAAEc,YAHhB;AAIE,MAAA,UAAU,EAAEhB,UAJd;AAKE,MAAA,aAAa,EAAEC;AALjB;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,IAAD;AAAM,MAAA,UAAU,EAAEkB,aAAa;AAA/B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAnDQtB,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"./App.css\";\nimport Main from \"./Main\";\nimport Sidebar from \"./Sidebar\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [activeNote, setActiveNote] = useState(false);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n\n      title: \"Untilted Note\",\n\n      body: \"\",\n\n      lastModified: Date.now(),\n    };\n\n    setNotes([newNote, ...notes]);\n  };\n\n  const onUpdateNote = (onUpdateNote) => {\n    const updatedNoteArray = notes.map((note) => {\n      if(note.id === activeNote) {\n        return updatedNote;\n      }\n\n\n      return note;\n    });\n\n    set\n  };\n\n  const onDeleteNote = (idToDelete) => {\n    setNotes(notes.filter((note) => note.id !== idToDelete));\n  };\n\n  const getActiveNote = () => {\n    return notes.find((note) => note.id === activeNote);\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        notes={notes}\n        onAddNote={onAddNote}\n        onDeleteNote={onDeleteNote}\n        activeNote={activeNote}\n        setActiveNote={setActiveNote}\n      />\n      <Main activeNote={getActiveNote()} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}