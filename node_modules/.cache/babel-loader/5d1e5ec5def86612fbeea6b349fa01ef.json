{"ast":null,"code":"var _jsxFileName = \"/home/ilaan/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"./App.css\";\nimport Main from \"./Main\";\nimport Sidebar from \"./Sidebar\";\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState(localStorage.notes ? JSON.parse(localStorage.notes) : []);\n  const [activeNote, setActiveNote] = useState(false);\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Untilted Note\",\n      body: \"\",\n      lastModified: Date.now()\n    };\n    setNotes([newNote, ...notes]);\n  };\n\n  const onUpdateNote = updatedNote => {\n    const updatedNoteArray = notes.map(note => {\n      if (note.id === activeNote) {\n        return updatedNote;\n      }\n\n      return note;\n    });\n    setNotes(updatedNoteArray);\n  };\n\n  const onDeleteNote = idToDelete => {\n    setNotes(notes.filter(note => note.id !== idToDelete));\n  };\n\n  const getActiveNote = () => {\n    return notes.find(note => note.id === activeNote);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      notes: notes,\n      onAddNote: onAddNote,\n      onDeleteNote: onDeleteNote,\n      activeNote: activeNote,\n      setActiveNote: setActiveNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      activeNote: getActiveNote(),\n      onUpdateNote: onUpdateNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lYbwunTc6vlh1N8X9eZy8GMfiNY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ilaan/my-app/src/App.js"],"names":["useEffect","useState","uuid","Main","Sidebar","createEditor","Slate","Editable","withReact","App","notes","setNotes","localStorage","JSON","parse","activeNote","setActiveNote","setItem","stringify","onAddNote","newNote","id","title","body","lastModified","Date","now","onUpdateNote","updatedNote","updatedNoteArray","map","note","onDeleteNote","idToDelete","filter","getActiveNote","find"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAGb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAChCW,YAAY,CAACF,KAAb,GAAqBG,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACF,KAAxB,CAArB,GAAsD,EADtB,CAAlC;AAGA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeR,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,QAAMS,SAAS,GAAG,MAAM;AACtB,UAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEnB,IAAI,EADM;AAGdoB,MAAAA,KAAK,EAAE,eAHO;AAKdC,MAAAA,IAAI,EAAE,EALQ;AAOdC,MAAAA,YAAY,EAAEC,IAAI,CAACC,GAAL;AAPA,KAAhB;AAUAf,IAAAA,QAAQ,CAAC,CAACS,OAAD,EAAU,GAAGV,KAAb,CAAD,CAAR;AACD,GAZD;;AAcA,QAAMiB,YAAY,GAAIC,WAAD,IAAiB;AACpC,UAAMC,gBAAgB,GAAGnB,KAAK,CAACoB,GAAN,CAAWC,IAAD,IAAU;AAC3C,UAAIA,IAAI,CAACV,EAAL,KAAYN,UAAhB,EAA4B;AAC1B,eAAOa,WAAP;AACD;;AAED,aAAOG,IAAP;AACD,KANwB,CAAzB;AAQApB,IAAAA,QAAQ,CAACkB,gBAAD,CAAR;AACD,GAVD;;AAYA,QAAMG,YAAY,GAAIC,UAAD,IAAgB;AACnCtB,IAAAA,QAAQ,CAACD,KAAK,CAACwB,MAAN,CAAcH,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYY,UAAnC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAM;AAC1B,WAAOzB,KAAK,CAAC0B,IAAN,CAAYL,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYN,UAAjC,CAAP;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEL,KADT;AAEE,MAAA,SAAS,EAAES,SAFb;AAGE,MAAA,YAAY,EAAEa,YAHhB;AAIE,MAAA,UAAU,EAAEjB,UAJd;AAKE,MAAA,aAAa,EAAEC;AALjB;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,IAAD;AAAM,MAAA,UAAU,EAAEmB,aAAa,EAA/B;AAAmC,MAAA,YAAY,EAAER;AAAjD;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA1DQlB,G;;KAAAA,G;AA4DT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport \"./App.css\";\nimport Main from \"./Main\";\nimport Sidebar from \"./Sidebar\";\nimport { createEditor } from 'slate'\nimport { Slate, Editable, withReact } from 'slate-react'\n\nfunction App() {\n\n  \n  const [notes, setNotes] = useState(\n    localStorage.notes ? JSON.parse(localStorage.notes) : []\n  );\n  const [activeNote, setActiveNote] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n\n      title: \"Untilted Note\",\n\n      body: \"\",\n\n      lastModified: Date.now(),\n    };\n\n    setNotes([newNote, ...notes]);\n  };\n\n  const onUpdateNote = (updatedNote) => {\n    const updatedNoteArray = notes.map((note) => {\n      if (note.id === activeNote) {\n        return updatedNote;\n      }\n\n      return note;\n    });\n\n    setNotes(updatedNoteArray);\n  };\n\n  const onDeleteNote = (idToDelete) => {\n    setNotes(notes.filter((note) => note.id !== idToDelete));\n  };\n\n  const getActiveNote = () => {\n    return notes.find((note) => note.id === activeNote);\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        notes={notes}\n        onAddNote={onAddNote}\n        onDeleteNote={onDeleteNote}\n        activeNote={activeNote}\n        setActiveNote={setActiveNote}\n      />\n      <Main activeNote={getActiveNote()} onUpdateNote={onUpdateNote} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}